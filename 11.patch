     $this->drupalGet('juicebox/xml/field/node/' . $node->id() . '/' . $this->instFieldName . '/full');
-    $this->assertRaw('<?xml version="1.0" encoding="UTF-8"?>', 'Valid XML detected.');
-    $this->assertNoRaw('<image', 'Non-image items was skipped.');
+    $this->assertSession()->responseContains('<?xml version="1.0" encoding="UTF-8"?>');
+    $this->assertSession()->responseNotContains('<image');
     // @todo , Check other incompatible_file_action combinations.
   }
 
diff --git a/tests/src/Functional/JuiceboxSubRequestCase.php b/tests/src/Functional/JuiceboxSubRequestCase.php
index 038aacf..e21b4a6 100644
--- a/tests/src/Functional/JuiceboxSubRequestCase.php
+++ b/tests/src/Functional/JuiceboxSubRequestCase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\juicebox\Functional;
 
+use Drupal\Core\Url;
 use Drupal\file\Entity\File;
 use Drupal\Component\Utility\Html;
 
@@ -30,7 +31,7 @@ class JuiceboxSubRequestCase extends JuiceboxCaseTestBase {
    *
    * @var array
    */
-  public static $modules = [
+  protected static $modules = [
     'node',
     'text',
     'field',
@@ -59,10 +60,11 @@ class JuiceboxSubRequestCase extends JuiceboxCaseTestBase {
   // list above, to use the "standard" profile's article type for this test
   // instead of the one we create manually (should also work, but will be slow).
   // protected $profile = 'standard';.
+
   /**
    * Define setup tasks.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     // Create and login user.
     $this->webUser = $this->drupalCreateUser([
@@ -88,21 +90,23 @@ class JuiceboxSubRequestCase extends JuiceboxCaseTestBase {
   public function testSubRequestDependent() {
     $node = $this->node;
     $xml_path = 'juicebox/xml/field/node/' . $node->id() . '/' . $this->instFieldName . '/_custom';
-    $xml_url = \Drupal::url('juicebox.xml_field', [
+    $xml_url = Url::fromRoute('juicebox.xml_field', [
       'entityType' => 'node',
       'entityId' => $node->id(),
       'fieldName' => $this->instFieldName,
       'displayName' => '_custom',
-    ]);
+    ])->toString();
     // Get the urls to the test image and thumb derivative used by default.
     $uri = File::load($node->{$this->instFieldName}[0]->target_id)->getFileUri();
-    $test_image_url = entity_load('image_style', 'juicebox_medium')->buildUrl($uri);
-    $test_thumb_url = entity_load('image_style', 'juicebox_square_thumb')->buildUrl($uri);
+    $test_image_url = \Drupal::entityTypeManager()
+      ->getStorage('image_style')->load('juicebox_medium')->buildUrl($uri);
+    $test_thumb_url = \Drupal::entityTypeManager()
+      ->getStorage('image_style')->load('juicebox_square_thumb')->buildUrl($uri);
     // Check for correct embed markup. This will also prime the cache.
     $content = $this->drupalGet('juicebox_test_row_formatter');
-    $this->assertRaw(trim(json_encode(['configUrl' => $xml_url]), '{}"'), 'Gallery setting found in Drupal.settings.');
-    $this->assertRaw('id="node--' . $node->id() . '--' . str_replace('_', '-', $this->instFieldName) . '---custom"', 'Embed code wrapper found.');
-    $this->assertRaw(Html::escape($test_image_url), 'Test image found in embed code');
+    $this->assertSession()->responseContains(trim(json_encode(['configUrl' => $xml_url]), '{}"'));
+    $this->assertSession()->responseContains('id="node--' . $node->id() . '--' . str_replace('_', '-', $this->instFieldName) . '---custom"');
+    $this->assertSession()->responseContains(Html::escape($test_image_url));
     // Extract the xml-source values from the XML.
     $matches = [];
     // In the pattern below we have to use four (yeah, FOUR) backslashes to
@@ -120,10 +124,10 @@ class JuiceboxSubRequestCase extends JuiceboxCaseTestBase {
         'xml-source-id' => $matches[2],
       ],
     ]);
-    $this->assertRaw('<?xml version="1.0" encoding="UTF-8"?>', 'Valid XML detected.');
-    $this->assertRaw('imageURL="' . Html::escape($test_image_url), 'Test image found in XML.' . $test_image_url);
-    $this->assertRaw('thumbURL="' . Html::escape($test_thumb_url), 'Test thumbnail found in XML.' . $test_thumb_url);
-    $this->assertRaw('backgroundcolor="green"', 'Custom background setting from pseudo field instance config found in XML.');
+    $this->assertSession()->responseContains('<?xml version="1.0" encoding="UTF-8"?>');
+    $this->assertSession()->responseContains('imageURL="' . Html::escape($test_image_url));
+    $this->assertSession()->responseContains('thumbURL="' . Html::escape($test_thumb_url));
+    $this->assertSession()->responseContains('backgroundcolor="green"');
   }
 
 }
diff --git a/tests/src/Functional/JuiceboxViewsCase.php b/tests/src/Functional/JuiceboxViewsCase.php
index 995b6ea..1ef3d86 100644
--- a/tests/src/Functional/JuiceboxViewsCase.php
+++ b/tests/src/Functional/JuiceboxViewsCase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\juicebox\Functional;
 
+use Drupal\Core\Url;
 use Drupal\file\Entity\File;
 use Drupal\Component\Utility\Html;
 
@@ -17,7 +18,7 @@ class JuiceboxViewsCase extends JuiceboxCaseTestBase {
    *
    * @var array
    */
-  public static $modules = [
+  protected static $modules = [
     'node',
     'text',
     'field',
@@ -47,10 +48,11 @@ class JuiceboxViewsCase extends JuiceboxCaseTestBase {
   // list above, to use the "standard" profile's article type for this test
   // instead of the one we create manually (should also work, but will be slow).
   // $profile = 'standard;'.
+
   /**
    * Define setup tasks.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Create and login user.
@@ -84,27 +86,31 @@ class JuiceboxViewsCase extends JuiceboxCaseTestBase {
     $this->drupalLogin($this->webUser);
     $node = $this->node;
     $xml_path = 'juicebox/xml/viewsstyle/juicebox_views_test/page_2';
-    $xml_url = \Drupal::url('juicebox.xml_viewsstyle',
-     ['viewName' => 'juicebox_views_test', 'displayName' => 'page_2']);
+    $xml_url = Url::fromRoute('juicebox.xml_viewsstyle', [
+      'viewName' => 'juicebox_views_test',
+      'displayName' => 'page_2',
+    ])->toString();
     // Get the urls to the test image and thumb derivative used by default.
     $uri = File::load($node->{$this->instFieldName}[0]->target_id)->getFileUri();
-    $test_image_url = entity_load('image_style', 'juicebox_medium')->buildUrl($uri);
-    $test_thumb_url = entity_load('image_style', 'juicebox_square_thumb')->buildUrl($uri);
+    $test_image_url = \Drupal::entityTypeManager()
+      ->getStorage('image_style')->load('juicebox_medium')->buildUrl($uri);
+    $test_thumb_url = \Drupal::entityTypeManager()
+      ->getStorage('image_style')->load('juicebox_square_thumb')->buildUrl($uri);
     // Check for correct embed markup.
     $this->drupalGet('juicebox-views-test-advanced');
-    $this->assertRaw(trim(json_encode(['configUrl' => $xml_url]), '{}"'), 'Gallery setting found in Drupal.settings.');
-    $this->assertRaw('juicebox-views-test--page-2', 'Embed code wrapper found.');
-    $this->assertRaw(Html::escape(file_url_transform_relative($test_image_url)), 'Test image found in embed code');
+    $this->assertSession()->responseContains(trim(json_encode(['configUrl' => $xml_url]), '{}"'));
+    $this->assertSession()->responseContains('juicebox-views-test--page-2');
+    $this->assertSession()->responseContains(Html::escape(file_url_transform_relative($test_image_url)));
     // Check for correct XML.
     $this->drupalGet($xml_path);
-    $this->assertRaw('<?xml version="1.0" encoding="UTF-8"?>', 'Valid XML detected.');
-    $this->assertRaw('imageURL="' . Html::escape($test_image_url), 'Test image found in XML.');
-    $this->assertRaw('thumbURL="' . Html::escape($test_thumb_url), 'Test thumbnail found in XML.');
+    $this->assertSession()->responseContains('<?xml version="1.0" encoding="UTF-8"?>');
+    $this->assertSession()->responseContains('imageURL="' . Html::escape($test_image_url));
+    $this->assertSession()->responseContains('thumbURL="' . Html::escape($test_thumb_url));
     // Logout and test that XML access is restricted. Note that this test view
     // is setup to limit view access only to admins.
     $this->drupalLogout();
     $this->drupalGet('juicebox/xml/viewsstyle/juicebox_views_test/page_2');
-    $this->assertResponse(403, 'XML access blocked for access-restricted view.');
+    $this->assertSession()->statusCodeEquals(403);
   }
 
 }

